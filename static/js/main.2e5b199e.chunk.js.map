{"version":3,"sources":["components/download-button/index.js","components/input/index.js","components/title/index.js","App.js","serviceWorker.js","index.js"],"names":["DownloadButton","props","react_default","a","createElement","className","ready","onClick","Input","state","value","onChange","ev","_this","setState","target","onUpdateText","placeholder","this","React","Component","Title","children","App","cid","downloading","downloadToBuffer","Promise","resolve","reject","node","files","get","err","length","content","onChangeCid","onDownloadClick","_callee","buffer","byteArray","regenerator_default","wrap","_context","prev","next","sent","Uint8Array","window","document","href","URL","createObjectURL","Blob","type","body","appendChild","click","removeChild","t0","console","error","finish","stop","cleanUp","_this2","Ipfs","on","input_Input","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.2e5b199e.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n\nexport default function DownloadButton(props) {\n  return (\n    <div className=\"download-container\">\n      {\n        props.ready ? \n          <button\n            className=\"download-button\"\n            onClick={props.onClick}\n          >\n            download\n          </button>\n        :\n          <p className=\"download-wait-text\">\n            wait\n          </p>\n      }\n    </div>\n  )\n}","import React from 'react';\nimport './style.css';\n\nexport default class Input extends React.Component {\n\n  state = {\n    value: ''\n  }\n\n  onChange = (ev) => {\n    this.setState({\n      value: ev.target.value\n    }, () => this.props.onUpdateText(this.state.value));\n  }\n\n  render() {\n    return (\n      <div className=\"input-container\">\n        <input\n          className=\"input-container__input\"\n          placeholder=\"IPFS CID\"\n          onChange={this.onChange}\n          value={this.state.value}\n        />\n      </div>\n    )\n  }\n}","import React from 'react';\nimport './style.css';\n\nexport default function Title(props) {\n\n  const title = 'IPFS Downloader';\n\n  return (\n    <div className=\"title-container\">\n      <p className=\"title-text\">\n        { props.children || title }\n      </p>\n    </div>\n  )\n}","import React, { Component } from 'react';\nimport DownloadButton from './components/download-button';\nimport Input from './components/input';\nimport Title from \"./components/title\";\n\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    ready: false,\n    cid: '',\n    downloading: false,\n  }\n\n  downloadToBuffer = (cid) => {\n    return new Promise((resolve, reject) => {\n      this.node.files.get(cid, (err, files) => {\n        if (!err && files.length === 1) {\n          resolve(files[0].content);\n        } else {\n          reject();\n        }\n      });\n    });\n  }\n\n  onChangeCid = (cid) => {\n    this.setState({\n      cid\n    });\n  }\n\n  onDownloadClick = async () => {\n    const { cid } = this.state;\n\n    this.setState({\n      downloading: true\n    });\n\n    try {\n      const buffer = await this.downloadToBuffer(cid);\n      const byteArray = new Uint8Array(buffer);\n      const a = window.document.createElement('a');\n\n      a.href = window.URL.createObjectURL(new Blob([byteArray], { type: 'application/octet-stream' }));\n      document.body.appendChild(a);\n      a.click();\n\n      document.body.removeChild(a);\n    } catch (err) {\n      console.error(err);\n    } finally {\n      this.setState({\n        downloading: false\n      });\n    }\n  }\n\n  cleanUp = () => {\n    this.setState({\n      cid: ''\n    });\n  }\n\n  componentDidMount() {\n    this.node = new window.Ipfs();\n\n    this.node.on('ready', () => {\n      this.setState({\n        ready: true\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {\n          this.state.downloading ? \n            <div className=\"App-container\">\n              <p>\n                downloading...\n              </p>\n            </div>\n          :\n            <div className=\"App-container\">\n              <Title>\n                IPFS Content Downloader\n              </Title>\n\n              <Input\n                onUpdateText={this.onChangeCid}\n              />\n\n              <DownloadButton \n                ready={this.state.ready}\n                onClick={this.onDownloadClick}\n              />\n            </div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}