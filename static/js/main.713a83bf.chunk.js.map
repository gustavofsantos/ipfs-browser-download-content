{"version":3,"sources":["components/download-button/index.js","components/input/index.js","components/title/index.js","App.js","serviceWorker.js","index.js"],"names":["DownloadButton","props","react_default","a","createElement","className","ready","onClick","Input","state","value","qrcodeOpen","onChange","ev","_this","setState","target","onUpdateText","handleError","err","console","error","handleScan","data","handleReadQRCode","this","lib_default","delay","onError","onScan","style","width","placeholder","React","Component","Title","children","App","cid","downloading","downloadToBuffer","Promise","resolve","reject","node","files","get","length","log","content","onChangeCid","onDownloadClick","_callee","buffer","byteArray","blob","name","regenerator_default","wrap","_context","prev","next","sent","Uint8Array","Blob","type","prompt","window","saveAs","t0","finish","stop","cleanUp","_this2","Ipfs","on","input_Input","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.713a83bf.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n\nexport default function DownloadButton(props) {\n  return (\n    <div className=\"download-container\">\n      {\n        props.ready ? \n          <button\n            className=\"download-button\"\n            onClick={props.onClick}\n          >\n            download\n          </button>\n        :\n          <p className=\"download-wait-text\">\n            wait\n          </p>\n      }\n    </div>\n  )\n}","import React from 'react';\nimport QrReader from \"react-qr-reader\";\nimport './style.css';\n\nexport default class Input extends React.Component {\n\n  state = {\n    value: '',\n    qrcodeOpen: false\n  }\n\n  onChange = (ev) => {\n    this.setState({\n      value: ev.target.value\n    }, () => this.props.onUpdateText(this.state.value));\n  }\n\n  handleError = (err) => {\n    console.error(err);\n  }\n\n  handleScan = (data) => {\n    if (typeof data === 'string') {\n      this.setState({\n        value: data\n      }, () => {\n        this.props.onUpdateText(this.state.value);\n        this.handleReadQRCode()\n      });\n    }\n  }\n\n  handleReadQRCode = () => {\n    this.setState({\n      qrcodeOpen: !this.state.qrcodeOpen\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        {\n          this.state.qrcodeOpen ? \n          <QrReader\n            delay={300}\n            onError={this.handleError}\n            onScan={this.handleScan}\n            style={{ width: \"100%\" }}\n          />\n          :\n          <div className=\"input-container\">\n            <input\n              className=\"input-container__input\"\n              placeholder=\"IPFS CID\"\n              onChange={this.onChange}\n              value={this.state.value}\n            />\n\n            <button\n              className=\"input-container__button\"\n              onClick={this.handleReadQRCode}>\n              QRCODE\n            </button>\n          </div>\n        }\n      </div>\n    )\n  }\n}","import React from 'react';\nimport './style.css';\n\nexport default function Title(props) {\n\n  const title = 'IPFS Downloader';\n\n  return (\n    <div className=\"title-container\">\n      <p className=\"title-text\">\n        { props.children || title }\n      </p>\n    </div>\n  )\n}","import React, { Component } from 'react';\nimport DownloadButton from './components/download-button';\nimport Input from './components/input';\nimport Title from \"./components/title\";\n\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    ready: false,\n    cid: '',\n    downloading: false,\n  }\n\n  downloadToBuffer = (cid) => {\n    return new Promise((resolve, reject) => {\n      this.node.files.get(cid, (err, files) => {\n        if (!err && files.length === 1) {\n          console.log(files[0]);\n          resolve(files[0].content);\n        } else {\n          reject();\n        }\n      });\n    });\n  }\n\n  onChangeCid = (cid) => {\n    this.setState({\n      cid\n    });\n  }\n\n  onDownloadClick = async () => {\n    const { cid } = this.state;\n\n    this.setState({\n      downloading: true\n    });\n\n    try {\n      const buffer = await this.downloadToBuffer(cid);\n      const byteArray = new Uint8Array(buffer);\n      const blob = new Blob([byteArray], { type: 'application/octet-stream' });\n\n      const name = prompt('File name', 'file.txt');\n\n      window.saveAs(blob, name);\n    } catch (err) {\n      console.error(err);\n    } finally {\n      this.setState({\n        downloading: false\n      });\n    }\n  }\n\n  cleanUp = () => {\n    this.setState({\n      cid: ''\n    });\n  }\n\n  componentDidMount() {\n    this.node = new window.Ipfs();\n\n    this.node.on('ready', () => {\n      this.setState({\n        ready: true\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {\n          this.state.downloading ? \n            <div className=\"App-container\">\n              <p>\n                downloading...\n              </p>\n            </div>\n          :\n            <div className=\"App-container\">\n              <Title>\n                IPFS Content Downloader\n              </Title>\n\n              <Input\n                onUpdateText={this.onChangeCid}\n              />\n\n              <DownloadButton \n                ready={this.state.ready}\n                onClick={this.onDownloadClick}\n              />\n            </div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}